class Solution {
public:
	int Partition(std::vector<int> &v, std::vector<int> &index, int start, int end){
	
	int pivot = end;
	int j = start;
	for(int i=start;i<end;++i){
		if(v[i]<v[pivot]){
			std::swap(v[i],v[j]);
			std::swap(index[i],index[j]);
			++j;
		}
	}
	std::swap(v[j],v[pivot]);
	std::swap(index[j],index[pivot]);
	return j;
	
}
	void Quicksort(std::vector<int> &v, std::vector<int> &index, int start, int end ){

		if(start<end){
			int p = Partition(v, index, start, end);
			Quicksort(v, index, start, p-1);
			Quicksort(v, index, p+1, end);
		}
	
	}
    std::vector<int> twoSum(std::vector<int>& nums, int target) {
        std::vector<int> result;
        std::vector<int> index;
        for (int i = 0; i < nums.size(); i++) index.push_back(i);
        Quicksort(nums, index, 0, nums.size() - 1);
        for (int i = 0; i < nums.size() - 1; i++)
        	for (int j = i + 1; j < nums.size(); j++){
				if (nums[i] + nums[j] == target){
					result.push_back(index[i]);
					result.push_back(index[j]);
					return result;
				}
				if (nums[i] + nums[j] > target) break;
				}
        return nums;
    }
};
